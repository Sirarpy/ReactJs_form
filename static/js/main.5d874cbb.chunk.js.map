{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Add","useForm","handleSubmit","register","errors","console","log","autoComplete","onSubmit","formData","type","name","ref","required","minLength","username","maxLength","age","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+PAKe,SAASA,IAAO,IAAD,EACeC,YAAQ,IAA3CC,EADoB,EACpBA,aAAcC,EADM,EACNA,SAAUC,EADJ,EACIA,OAQhC,OAFAC,QAAQC,IAAIF,GAGV,6BACE,0BAAMG,aAAa,MAAMC,SAAUN,GARvC,SAAkBO,GAChBJ,QAAQC,IAAIG,OAQR,mDACA,2CACA,2BACEC,KAAK,OACLC,KAAK,WACLC,IAAKT,EAAS,CAAEU,UAAU,EAAMC,UAAW,MAG5CV,EAAOW,UAAY,+CAEpB,sCACA,2BAAOL,KAAK,SAASC,KAAK,MAAMC,IAAKT,EAAS,CAAEU,UAAU,EAAMG,UAAW,MAE1EZ,EAAOa,KAAO,0CAEf,8BACE,2BAAOP,KAAK,WAAWC,KAAK,WAAWC,IAAKT,IAC5C,+CAGF,4BAAQO,KAAK,UAAb,YCzBYQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.5d874cbb.chunk.js","sourcesContent":["import React from \"react\";\n// import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport \"./styles.css\";\n\nexport default function Add() {\n  const { handleSubmit, register, errors } = useForm({});\n\n  function onSubmit(formData) {\n    console.log(formData);\n  }\n\n  console.log(errors);\n\n  return (\n    <div>\n      <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\n        <legend>React-hook-form</legend>\n        <label>Username</label>\n        <input\n          type=\"text\"\n          name=\"username\"\n          ref={register({ required: true, minLength: 3, })}\n        />\n\n        {errors.username && <p>Username invalid</p>}\n\n        <label>Age</label>\n        <input type=\"number\" name=\"age\" ref={register({ required: true, maxLength: 2, })} />\n\n        {errors.age && <p>Age invalid</p>}\n\n        <span>\n          <input type=\"checkbox\" name=\"remember\" ref={register} />\n          <label>Remember me</label>\n        </span>\n\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n}\n// ********************************************************\n// example with useState\n// export default function Add() {\n\n//   const [errors, setErrors] = useState({});\n\n//   const [formData, setFormData] = useState({\n//     username: '',\n//     age: '',\n//     remember: false\n//   })\n\n//   function validate({ username }) {\n//     const valid =  username && username.length > 3;\n//     if (!valid) {\n//       setErrors({username:true})\n//     } else{\n//       setErrors({})\n//     }\n//     return valid\n//   }\n\n//   function onSubmit(event) {\n//   event.preventDefault();\n//   validate(formData) ? console.log(formData) : console.log(\"invalid\");\n//   }\n\n//   function onChange({ target }) {\n//     const value = target.type === \"checkbox\" ? target.checked : target.value;\n//     setFormData( prevState => ({\n//     ...prevState,\n//     [target.name]: value\n//     }))\n//   }\n//   return (\n//     <div>\n//       <form autoComplete=\"off\" onSubmit={onSubmit} >\n//       <legend>React-hook-form</legend>\n//         <label>Username</label>\n//         <input type=\"text\" name=\"username\" value={formData.username} onChange={onChange}/>\n\n//         {errors.username && <p>Username invalid</p>}\n\n//         <label>Age</label>\n//         <input type=\"number\" name=\"age\" value={formData.age} onChange={onChange}/>\n\n//         <span>\n//           <input type=\"checkbox\" name=\"remember\" checked={formData.remember} onChange={onChange}/>\n//           <label>Remember me</label>\n//         </span>\n\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// }\n// ********************************************************\n\n// // example 2 to add email and pasword\n// export default function App() {\n//   const { register, handleSubmit, errors } = useForm();\n\n//   const onSubmit = (data) => {\n//     console.log(data);\n//   };\n//   return (\n//     <form onSubmit={handleSubmit(onSubmit)}>\n//       <input\n//       type=\"email\"\n//        placeholder=\"email\"\n//       name=\"email\"\n//       ref={register} />\n//       <input\n//         type=\"password\"\n//         placeholder=\"password\"\n//         name=\"password\"\n//         // ref={register({ required: true, minLength: 8 })}\n//         ref={register({\n//           required: \"password required\",\n//           minLength: { value: 8, message: \"too shorter\" },\n//         })}\n//       />\n//       {/* {errors.password && <p>password is invalid</p>} */}\n//       {errors.password && <p>{errors.password.message}</p>}\n//       <input type=\"submit\" />\n//     </form>\n//   );\n// }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}